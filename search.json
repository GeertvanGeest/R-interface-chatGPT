[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R interface chatGPT",
    "section": "",
    "text": "Clone the repository:\ngit clone https://github.com/GeertvanGeest/R-interface-chatGPT.git\nAfter that, open the project in R studio.\nCreate a file called .env.R that stores your chatGPT API key in an ojbect called API_KEY , so e.g.\n\nAPI_KEY &lt;- \"sk-XXXXXXXXXXX\"\n\nAfter that, source the functions in main.R and the environment file:\n\nsource(\"main.R\")\nsource(\".env.R\")"
  },
  {
    "objectID": "index.html#setup",
    "href": "index.html#setup",
    "title": "R interface chatGPT",
    "section": "",
    "text": "Clone the repository:\ngit clone https://github.com/GeertvanGeest/R-interface-chatGPT.git\nAfter that, open the project in R studio.\nCreate a file called .env.R that stores your chatGPT API key in an ojbect called API_KEY , so e.g.\n\nAPI_KEY &lt;- \"sk-XXXXXXXXXXX\"\n\nAfter that, source the functions in main.R and the environment file:\n\nsource(\"main.R\")\nsource(\".env.R\")"
  },
  {
    "objectID": "index.html#chatgpt-with-r",
    "href": "index.html#chatgpt-with-r",
    "title": "R interface chatGPT",
    "section": "ChatGPT with R",
    "text": "ChatGPT with R\nNow you can play around with a simple chatGPT interface:\n\nchatGPT(\"Tell me a joke about a bioinformatician\") |&gt; cat()\n\nWhy did the bioinformatician always carry a microscope?\n\nBecause they wanted to keep an \"i\" on the genes!\n\n\nYou can also change the system prompt, i.e. the background style/information of the responder:\n\nchatGPT(user_prompt = \"Are fungi eukaryotes?\",\n        system_prompt = \"You are a helpful assistant, that's also a cool surfer dude\") |&gt; cat()\n\nYes, fungi are indeed eukaryotes. They belong to the kingdom Fungi, which includes organisms such as mushrooms, yeasts, and molds. Like other eukaryotes, fungi have cells with a distinct nucleus containing their genetic material (DNA) enclosed within a membrane.\n\n\nIf you’re asking for R code, this can be extracted and run on the fly\n\nstring &lt;- chatGPT(\"Generate a scatterplot with ggplot2 where the size of the points is defined by a column called 'size', and the color is defined by a column called 'color'\")\n\nextract_code(string) |&gt; sapply(cat)\n\nlibrary(ggplot2)\n\n# Create some sample data\ndata &lt;- data.frame(\n  x = seq(1, 10),\n  y = seq(1, 10),\n  size = c(2, 4, 6, 8, 10, 12, 14, 16, 18, 20),\n  color = c('red', 'blue', 'green', 'yellow', 'orange', 'purple', 'brown', 'pink', 'grey', 'black')\n)\n\n# Generate scatterplot\nggplot(data, aes(x = x, y = y, size = size, color = color)) +\n  geom_point() +\n  scale_size_continuous() +\n  scale_color_manual(values = unique(data$color)) +\n  labs(title = \"Scatterplot\", x = \"X-axis\", y = \"Y-axis\")\n\n\n[[1]]\nNULL\n\nextract_code(string)[[1]] |&gt; parse(text = _) |&gt; eval()\n\n\n\n\nAlso nice is that it can create shiny apps:\n\nstring &lt;- chatGPT(\"Create a r shiny app that creates a histogram of set of random numbers. Let the user choose the mean, standard deviation and number of observations\")\n\nextract_code(string) |&gt; sapply(cat)\n\nlibrary(shiny)\n\n# Define the UI\nui &lt;- fluidPage(\n  titlePanel(\"Random Number Histogram\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      numericInput(\"mean\", \"Mean:\", value = 0),\n      numericInput(\"sd\", \"Standard Deviation:\", value = 1),\n      numericInput(\"n\", \"Number of Observations:\", value = 100),\n      br(),\n      actionButton(\"generate\", \"Generate Random Numbers\")\n    ),\n    \n    mainPanel(\n      plotOutput(\"histogram\")\n    )\n  )\n)\n\n# Define the server function\nserver &lt;- function(input, output) {\n  \n  # Generate random numbers\n  observeEvent(input$generate, {\n    random_numbers &lt;- rnorm(input$n, mean = input$mean, sd = input$sd)\n    output$histogram &lt;- renderPlot({\n      hist(random_numbers, main = \"Random Number Histogram\", xlab = \"Values\", col = \"lightblue\")\n    })\n  })\n  \n}\n\n# Run the application\nshinyApp(ui = ui, server = server)\n\n\n[[1]]\nNULL"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  }
]