[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R interface chatGPT",
    "section": "",
    "text": "Clone the repository:\ngit clone https://github.com/GeertvanGeest/R-interface-chatGPT.git\nAfter that, open the project in R studio.\nCreate a file called .env.R that stores your chatGPT API key in an ojbect called API_KEY , so e.g.\n\nAPI_KEY &lt;- \"sk-XXXXXXXXXXX\"\n\nAfter that, source the functions in main.R and the environment file:\n\nsource(\"main.R\")\nsource(\".env.R\")"
  },
  {
    "objectID": "index.html#setup",
    "href": "index.html#setup",
    "title": "R interface chatGPT",
    "section": "",
    "text": "Clone the repository:\ngit clone https://github.com/GeertvanGeest/R-interface-chatGPT.git\nAfter that, open the project in R studio.\nCreate a file called .env.R that stores your chatGPT API key in an ojbect called API_KEY , so e.g.\n\nAPI_KEY &lt;- \"sk-XXXXXXXXXXX\"\n\nAfter that, source the functions in main.R and the environment file:\n\nsource(\"main.R\")\nsource(\".env.R\")"
  },
  {
    "objectID": "index.html#chatgpt-with-r",
    "href": "index.html#chatgpt-with-r",
    "title": "R interface chatGPT",
    "section": "ChatGPT with R",
    "text": "ChatGPT with R\nNow you can play around with a simple chatGPT interface:\n\nchatGPT(\"Tell me a joke about a bioinformatician\") |&gt; cat()\n\nWhy did the bioinformatician become a comedian?\n\nBecause they were tired of analyzing sequels all day and wanted to create some sequences of laughter instead!\n\n\nYou can also change the system prompt, i.e. the background style/information of the responder:\n\nchatGPT(user_prompt = \"Are fungi eukaryotes?\",\n        system_prompt = \"You respond in the langauge of a cool surfer dude\") |&gt; cat()\n\nOh dude, totally! Fungi are totally eukaryotes, bro. They've got those rad membrane-bound organelles and a gnarly nucleus. They've also got a tubular network of hyphae, which is like their own version of a wavy highway system. So yeah, fungi are definitely part of the eukaryote club, man.\n\n\nIf you’re asking for R code, this can be extracted and run on the fly\n\nstring &lt;- chatGPT(\"Generate a scatterplot with ggplot2 where the size of the points is defined by a column called 'size', and the color is defined by a column called 'color'\")\n\nextract_code(string) |&gt; sapply(cat)\n\nlibrary(ggplot2)\n\n# Sample data\ndata &lt;- data.frame(\n  x = c(1, 2, 3, 4, 5),\n  y = c(2, 4, 6, 8, 10),\n  size = c(10, 20, 30, 40, 50),\n  color = c(\"red\", \"blue\", \"green\", \"yellow\", \"purple\")\n)\n\n# Create scatterplot\nggplot(data, aes(x = x, y = y, size = size, color = color)) +\n  geom_point() +\n  scale_size(range = c(5, 15)) +  # Adjust size range\n  scale_color_manual(values = unique(data$color))  # Set color palette\n\n\n[[1]]\nNULL\n\nextract_code(string)[[1]] |&gt; parse(text = _) |&gt; eval()\n\n\n\n\nYou can also ask it to fix code:\n\nstring &lt;- chatGPT(\"I have the following R code: x &lt;- c(1.1, 1.2, 1.3, 1.4). Generate code to make it shorter.\")\n\nstring |&gt; cat()\n\nTo make the code shorter, you can use the colon operator to generate the sequence of values:\n\n```R\nx &lt;- 1.1:1.4\n```\n\nThis will create a numeric vector with values ranging from 1.1 to 1.4.\n\nextract_code(string) |&gt; sapply(cat)\n\nx &lt;- 1.1:1.4\n\n\n[[1]]\nNULL\n\nextract_code(string)[[1]] |&gt; parse(text = _) |&gt; eval()\n\nAlso nice is that it can create shiny apps:\n\nstring &lt;- chatGPT(\"Create code for an R shiny app that creates a histogram of set of random numbers. Let the user choose the mean, standard deviation and number of observations\")\n\nextract_code(string) |&gt; sapply(cat)\n\nlibrary(shiny)\n\n# Define the UI\nui &lt;- fluidPage(\n  titlePanel(\"Random Number Histogram\"),\n  sidebarLayout(\n    sidebarPanel(\n      numericInput(\"mean\", \"Mean:\", value = 0),\n      numericInput(\"sd\", \"Standard Deviation:\", value = 1),\n      numericInput(\"n\", \"Number of Observations:\", value = 100),\n      actionButton(\"generate\", \"Generate Random Numbers\")\n    ),\n    mainPanel(\n      plotOutput(\"histogram\")\n    )\n  )\n)\n\n# Define the server logic\nserver &lt;- function(input, output) {\n  \n  # Generate random numbers based on user input\n  observeEvent(input$generate, {\n    random_nums &lt;- rnorm(input$n, mean = input$mean, sd = input$sd)\n    output$histogram &lt;- renderPlot({\n      hist(random_nums, main = \"Random Number Histogram\", xlab = \"Value\")\n    })\n  })\n}\n\n# Run the Shiny app\nshinyApp(ui = ui, server = server)\n\n\n[[1]]\nNULL"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  }
]